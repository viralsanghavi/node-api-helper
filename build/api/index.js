"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isArray = exports.getJsonString = exports.getFormattedDate = exports.getPaginationParams = exports.checkMissingKeys = exports.formatInsertQueryValues = exports.getUpdateQuerySetClauseFormat = exports.getResponse = exports.DATE_TIME_FORMAT = exports.PAGINATION = exports.DATABASE_TRANSACTION_TYPES = exports.HTTP_STATUS_CODES = void 0;
// import {createHmac} from "crypto";
const moment_1 = __importDefault(require("moment"));
exports.HTTP_STATUS_CODES = {
    OK: 200,
    CREATED: 201,
    ACCEPTED: 202,
    NO_CONTENT: 204,
    BAD_REQUEST: 400,
    UNAUTHORIZED: 401,
    FORBIDDEN: 403,
    NOT_FOUND: 404,
    REQUEST_TIMEOUT: 408,
    INTERNAL_SERVER_ERROR: 500,
    BAD_GATEWAY: 502,
    SERVICE_UNAVAILABLE: 503,
    GATEWAY_TIMEOUT: 504,
};
exports.DATABASE_TRANSACTION_TYPES = {
    BEGIN: "BEGIN",
    COMMIT: "COMMIT",
    ROLLBACK: "ROLLBACK",
};
exports.PAGINATION = {
    MIN_LIMIT: 1,
    MAX_LIMIT: 100,
    LIMIT: 20,
    DEFAULT_PAGE: 1,
};
exports.DATE_TIME_FORMAT = "YYYY-MM-DD HH:mm:ss.SSS";
const getResponse = (obj = { message: "Bad Request" }, statusCode = exports.HTTP_STATUS_CODES.BAD_REQUEST, contentType = "application/json") => {
    let resMessage = {
        body: JSON.stringify(obj),
        statusCode: statusCode,
        isBase64Encoded: false,
        headers: {
            contentType,
        },
    };
    return resMessage;
};
exports.getResponse = getResponse;
/**
 * @description function creates a comma separated format of keys and values to use in set clause of update queries
 * @param {*} keyValueObject
 * @returns string
 * @example
 * keyValueObject: {"key1": value1, "key2": value2}
 * output: "key1=value1, key2=value2"
 */
const getUpdateQuerySetClauseFormat = (keyValueObject) => {
    if (!keyValueObject || typeof keyValueObject !== "object") {
        throw new Error("Object type is required");
    }
    return Object.entries(keyValueObject)
        .map(([key, value]) => `${key}='${value}'`)
        .join(", ");
};
exports.getUpdateQuerySetClauseFormat = getUpdateQuerySetClauseFormat;
/**
 * @description: function creates a comma-separated string of quoted values that can be used for passing inside insert queries.
 * @param {*} fieldArray
 * @returns string
 * @example
 * fieldArray: ["person1", 26, 9876543210]
 * output: "'person1', '26', '9876543210'"
 */
const formatInsertQueryValues = (fieldArray) => {
    if (!Array.isArray(fieldArray)) {
        throw new Error("Array is required");
    }
    return fieldArray.map((element) => `'${element}'`).join(",");
};
exports.formatInsertQueryValues = formatInsertQueryValues;
/**
 * @description function compares two arrays and returns keys from first array which are not available in second array
 * @param {*} requiredList array
 * @param {*} availableList array
 * @returns array
 * @example
 * requiredList: ["one", "two"]
 * availableList: ["two", "three"]
 * returns ["one"]
 */
const checkMissingKeys = (requiredList = [], availableList = []) => {
    if (!Array.isArray(requiredList) || !Array.isArray(availableList)) {
        throw new Error("Required and Available List must be an array");
    }
    return requiredList.filter((element) => availableList.indexOf(element) < 0);
};
exports.checkMissingKeys = checkMissingKeys;
// /**
//  * @description function hashes numbers and strings.
//  * @param {*} dataString string | number
//  * @param {*} salt
//  * @returns string
//  */
// export const createHash = (dataString: string, salt: string): string => {
//   if (typeof dataString !== "string") {
//     throw new Error("String type is required");
//   }
//   const hmac = createHmac("sha256", salt);
//   return hmac.update(dataString).digest("hex");
// };
/**
 *
 * @param {*} limit
 * @param {*} page
 * @returns { limit: number, offset: number }
 */
const getPaginationParams = (limit, page) => {
    const { LIMIT, MIN_LIMIT, MAX_LIMIT, DEFAULT_PAGE } = exports.PAGINATION;
    if (typeof limit !== "number") {
        limit = LIMIT;
    }
    else {
        if (limit < MIN_LIMIT) {
            limit = MIN_LIMIT;
        }
        if (limit > MAX_LIMIT) {
            limit = MAX_LIMIT;
        }
    }
    if (typeof page !== "number" || page < DEFAULT_PAGE) {
        page = DEFAULT_PAGE;
    }
    const offset = (page - 1) * limit;
    return { limit, offset };
};
exports.getPaginationParams = getPaginationParams;
/**
 * @description returns passed date or current date into required passed format
 * @param {*} format
 * @param {*} date
 * @returns string
 */
const getFormattedDate = (format, date) => {
    if (date) {
        return (0, moment_1.default)(date).format(format);
    }
    return (0, moment_1.default)().format(format);
};
exports.getFormattedDate = getFormattedDate;
const getJsonString = (str) => {
    try {
        if (str.toString() === "null")
            throw new Error();
        return JSON.parse(str);
    }
    catch (e) {
        return {};
    }
};
exports.getJsonString = getJsonString;
const isObject = function (obj) {
    return obj === Object(obj) && !(0, exports.isArray)(obj) && typeof obj !== "function";
};
const isArray = function (array) {
    return Array.isArray(array);
};
exports.isArray = isArray;
const toCamel = (str) => {
    return str.replace(/([-_][a-z])/gi, ($1) => {
        return $1.toUpperCase().replace("-", "").replace("_", "");
    });
};
// export const keysToCamel = function (obj: any): any {
//   if (isObject(obj)) {
//     const n = {};
//     Object.keys(obj).forEach((key) => {
//       n[toCamel(key)] = keysToCamel(obj[key]);
//     });
//     return n;
//   } else if (isArray(obj)) {
//     return obj.map((index) => {
//       return keysToCamel(index);
//     });
//   }
//   return obj;
// };
//# sourceMappingURL=data:application/json;base64,